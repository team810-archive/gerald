// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc810.SteamWorksRobot.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc810.SteamWorksRobot.Robot;

/**
 *
 */
public class ControlCamera extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_Speed;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public ControlCamera(double Speed) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_Speed = Speed;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.cameraMount);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	int pov1 = Robot.oi.getDriveStick().getPOV(0);
    	int pov2 = Robot.oi.getMechanismStick().getPOV(0);
    	
    	int pov = pov2;
    	if(pov1!=-1) pov = pov1;
    	
    	double p = 0;
    	double t = 0;
    	
    	if(pov != -1){
    		switch(pov){
	    		case 45: case 90: case 135:
	    			p = 1;
	    			break;
	    		case 225: case 270: case 315:
	    			p = -1;
	    			break;
    		}
    		
    		switch(pov){
    		case 315: case 0: case 45:
    			t = 1;
    			break;
    		case 135: case 180: case 225:
    			t = -1;
    			break;
    		}
    	}
    	
    	Robot.cameraMount.setPanRelative(p*m_Speed);
    	Robot.cameraMount.setTiltRelative(t*m_Speed);
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
